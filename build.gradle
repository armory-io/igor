/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'io.spinnaker.project' version "$spinnakerGradleVersion" apply false
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.8.4'
}

allprojects {
  repositories {
    jcenter()
  }
}

subprojects {
  group = "com.netflix.spinnaker.igor"
  apply plugin: 'io.spinnaker.project'
  apply plugin: 'jacoco'
  apply plugin: 'com.github.kt3k.coveralls'

  if ([korkVersion, fiatVersion].find { it.endsWith('-SNAPSHOT') }) {
    repositories {
      mavenLocal()
    }
  }

  if (name != "igor-bom") {
    apply plugin: 'java-library'
    apply plugin: 'groovy'

    sourceSets.main.java.srcDirs = []
    sourceSets.main.groovy.srcDirs += ["src/main/java"]

    dependencies {
      implementation platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
      compileOnly "org.projectlombok:lombok"
      annotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
      annotationProcessor "org.projectlombok:lombok"
      testAnnotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
      testAnnotationProcessor "org.projectlombok:lombok"

      implementation "org.springframework.boot:spring-boot-starter-actuator"

      // TODO(rz): Get rid of this dependency!
      implementation "net.logstash.logback:logstash-logback-encoder"

      // TODO(rz): Why does Spock need groovy as implementation and not testImplementation to find tests?
      implementation "org.codehaus.groovy:groovy-all"
      testImplementation "org.springframework.boot:spring-boot-starter-test"
      testImplementation "org.spockframework:spock-core"
      testImplementation "org.spockframework:spock-spring"
      testImplementation "org.springframework:spring-test"
      testImplementation "org.hamcrest:hamcrest-core"
      testImplementation "org.junit.jupiter:junit-jupiter-api"
      testImplementation "org.assertj:assertj-core"
      testRuntimeOnly "cglib:cglib-nodep"
      testRuntimeOnly "org.objenesis:objenesis"
      testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
      testRuntime "org.junit.jupiter:junit-jupiter-engine"
    }

    test {
      testLogging {
        exceptionFormat = 'full'
      }
      useJUnitPlatform()
    }

    tasks.withType(JavaExec) {
      if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8188'
      }
    }
    tasks.withType(Javadoc) {
      failOnError = false
    }
  }
}

defaultTasks 'run'


def jacocoProjects = subprojects.findAll { it.path != ':igor-bom' }
task jacocoMerge(type: JacocoMerge) {
  jacocoProjects.each { subproject ->
    executionData subproject.tasks.withType(Test)
  }
  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'
  dependsOn jacocoProjects.test, jacocoMerge

  getSourceDirectories().setFrom(jacocoProjects.sourceSets.main.allSource.srcDirs)
  getClassDirectories().setFrom(jacocoProjects.sourceSets.main.output)

  executionData jacocoMerge.destinationFile

  reports {
    html.enabled = true // human readable
    xml.enabled = true // required by coveralls
  }
}

coveralls {
  sourceDirs = jacocoProjects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
}
